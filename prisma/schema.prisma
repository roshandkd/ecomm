// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// npx prisma generate
// npx prisma db push

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  username        String
  password        String
  phone_number    String?  // Optional, use ? if the field is optional
  shipping_address String?
  billing_address  String?
  role            UserRole @default(customer)  // Use the enum type
  created_at      DateTime @default(now())  // DateTime for current timestamp
  updatedAt       DateTime @updatedAt
  orders          Order[]
  reviews         Review[]
  wishlist        Wishlist[]
}


// Products Table
model Product {
  id              Int      @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  imageUrl        String?
  stockQuantity   Int      @default(0)
  categoryId      Int?
  category        Category? @relation(fields: [categoryId], references: [id])
  orderItems      OrderItem[]
  reviews         Review[]
  wishlist        Wishlist[]
  inventory       Inventory?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Category {
  id              Int        @id @default(autoincrement())
  name            String
  description     String?
  parentCategoryId Int?
  parentCategory  Category?  @relation("CategoryToCategory", fields: [parentCategoryId], references: [id])
  children        Category[] @relation("CategoryToCategory")  // This is the reverse relation
  products        Product[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}


// Orders Table
model Order {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  totalAmount     Float
  status          String   @default("pending") // "pending", "processing", "shipped", "delivered", "cancelled"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orderItems      OrderItem[]
  payment         Payment?
  shipping        Shipping?
}

// Order Items Table (Many-to-Many between Orders and Products)
model OrderItem {
  id              Int      @id @default(autoincrement())
  orderId         Int
  order           Order    @relation(fields: [orderId], references: [id])
  productId       Int
  product         Product  @relation(fields: [productId], references: [id])
  quantity        Int
  price           Float
  createdAt       DateTime @default(now())
}

model Payment {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique  // Add @unique to make it one-to-one
  order           Order    @relation(fields: [orderId], references: [id])
  paymentMethod   String   // "credit_card", "paypal", "bank_transfer"
  paymentStatus   String   @default("pending") // "pending", "completed", "failed"
  amount          Float
  transactionId   String?
  paymentDate     DateTime @default(now())
}


// Reviews Table
model Review {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  productId       Int
  product         Product  @relation(fields: [productId], references: [id])
  rating          Int
  comment         String?
  createdAt       DateTime @default(now())
}

model Shipping {
  id              Int      @id @default(autoincrement())
  orderId         Int      @unique  // Add @unique to make it one-to-one
  order           Order    @relation(fields: [orderId], references: [id])
  shippingAddress String
  shippingStatus  String   @default("pending") // "pending", "shipped", "delivered"
  trackingNumber  String?
  shippingDate    DateTime?
  createdAt       DateTime @default(now())
}

model Inventory {
  id              Int      @id @default(autoincrement())
  productId       Int      @unique  // Add @unique to make it one-to-one
  product         Product  @relation(fields: [productId], references: [id])
  stockQuantity   Int      @default(0)
  lastRestockedAt DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

// Wishlist Table
model Wishlist {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  productId       Int
  product         Product  @relation(fields: [productId], references: [id])
  createdAt       DateTime @default(now())
}

// Coupons Table
model Coupon {
  id              Int      @id @default(autoincrement())
  code            String   @unique
  discountType    String   // "percentage" or "fixed"
  discountValue   Float
  validFrom       DateTime?
  validUntil      DateTime?
  maxUses         Int?
  usedCount       Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

enum UserRole {
  customer
  admin
}
